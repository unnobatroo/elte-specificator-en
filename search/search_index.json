{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Using the Specificator Tool","text":"<p>The Specificator tool helps validate data against formal specifications. This guide outlines the steps for using the tool and provides an example structure.</p>"},{"location":"#quick-start-guide","title":"Quick Start Guide","text":"<ol> <li>Enter the Specification: Define your formal specification in the main editor panel.</li> <li>Define the Data: In the right-hand panel, press Ctrl+Space to generate a base data structure, then enter your test data.</li> <li>Validation Result: If the test case turns green, the data has satisfied the specification.<ul> <li>This result validates the correctness of the specification for that input.</li> </ul> </li> <li>Debugging: Use the \"Evaluate\" button to display the step-by-step evaluation. This is useful for debugging, though it only works in simpler cases.</li> </ol>"},{"location":"#example-specification","title":"Example Specification","text":"<p>This example checks if a student record (<code>s</code>) exists within an array of student records (<code>students</code>).</p> <p>```text In: n \\(\\in\\) \\(\\mathbb{N}\\), students \\(\\in\\) Student[1..n], Student=(name:S x grade:[1..5]), s \\(\\in\\) Student Out: found \\(\\in\\) \\(\\mathbb{L}\\) Pre: - Post: found = \\(\\exists\\) index \\(\\in\\) [1..n] : (students[index].name = s.name)</p>"},{"location":"how-to-input-data/","title":"How to input data","text":"<p>The Specificator tool accepts data in various formats (JSON-like and YAML-like) that must precisely match the structure defined in your formal specification.</p>"},{"location":"how-to-input-data/#1-array-of-records-eg-student-data","title":"1. Array of Records (e.g., Student Data)","text":"<p>The main data structure often involves an array of records (objects), such as a <code>students</code> array, where each object holds defined keys (e.g., name and grade).</p>"},{"location":"how-to-input-data/#jsonlist-format-example","title":"JSON/List Format Example","text":"<p>This format uses square brackets and commas, common in JSON structures.</p> <pre><code>students: [\n    {name: \"\u00c1lmos\", grade: 3},\n    {name: \"Gy\u0151z\u0151\", grade: 5},\n    {name: \"G\u00e9za\", grade: 4},\n]\n</code></pre>"},{"location":"how-to-input-data/#yamlblock-format-example","title":"YAML/Block Format Example","text":"<p>This format uses clear indentation and dashes, which can be more readable for complex or lengthy data sets.</p> <pre><code>students:\n    - name: Gy\u0151z\u0151\n      grade: 5\n    - name: \u00c1lmos\n      grade: 3\n    - name: G\u00e9za\n      grade: 2\n</code></pre>"},{"location":"how-to-input-data/#2-single-object-and-elementary-values","title":"2. Single Object and Elementary Values","text":"<p>Data for single variables is defined directly under the variable name.</p>"},{"location":"how-to-input-data/#single-student-object-s","title":"Single Student Object (s)","text":"<p>The variable <code>s</code> (for student) represents a single object, defining a name and a grade for one entry.</p> <p>YAML Format:</p> <pre><code>s:\n  name: Gy\u0151z\u0151\n  grade: 5\n</code></pre> <p>JSON Format:</p> <pre><code>s: {name: \"Gy\u0151z\u0151\", grade:5}\n</code></pre> <p>Logical (Boolean) Value</p> <p>A simple example defining a logical variable.</p> <pre><code>included: true\n</code></pre>"},{"location":"how-to-write-a-specification/","title":"How to Write a Specification","text":"<p>A formal specification defines the relationship between input (<code>In:</code>) and output (<code>Out:</code>), constrained by pre-conditions (<code>Pre:</code>) and guaranteed by post-conditions (<code>Post:</code>).</p>"},{"location":"how-to-write-a-specification/#1-input-declaration-textin","title":"1. Input Declaration (\\(\\text{In}:\\))","text":"<p>Declarations follow the simple pattern: <code>data\\_name $\\in$ Set</code>. Data names should start with a lowercase letter, and declarations are separated by commas.</p>"},{"location":"how-to-write-a-specification/#elementary-sets","title":"Elementary Sets","text":"Notation Set Name Description Example Declaration \\(\\mathbb{N}\\) Natural numbers Non-negative integers: \\(\\{0, 1, 2, \\dots\\}\\) <code>a $\\in$ $\\mathbb{N}$</code> \\(\\mathbb{Z}\\) Integers All positive and negative whole numbers. <code>b $\\in$ $\\mathbb{Z}$</code> \\(\\mathbb{R}\\) Real numbers All rational and irrational numbers. <code>c $\\in$ $\\mathbb{R}$</code> \\(\\mathbb{L}\\) Logical (Boolean) values True or False. <code>d $\\in$ $\\mathbb{L}$</code> \\(\\mathbb{S}\\) Strings Sequences of characters. <code>e $\\in$ $\\mathbb{S}$</code> \\(\\mathbb{C}\\) or \\(\\mathbb{K}\\) Characters Single characters. <code>f $\\in$ $\\mathbb{C}$</code>"},{"location":"how-to-write-a-specification/#intervals-and-ranges","title":"Intervals and Ranges","text":"Example Description <code>iv1 $\\in$ [1..3]</code> The value of <code>iv1</code> must be an integer between 1 and 3, inclusive."},{"location":"how-to-write-a-specification/#indexed-sequences-and-arrays","title":"Indexed Sequences and Arrays","text":"<p>These are used for handling many elements of the same type.</p> <ul> <li><code>x1 $\\in$ $\\mathbb{N}$[1..3]</code>: An array of 3 natural numbers, with index range 1..3. (Element referencing: e.g., <code>x1[2]</code>).</li> <li><code>n $\\in$ $\\mathbb{N}$, x $\\in$ $\\mathbb{Z}$[1..n]</code>: The array size (<code>n</code>) is part of the input, and the array <code>x</code> is indexed from 1 to \\(n\\).</li> <li><code>x3 $\\in$ $\\mathbb{N}$[1..]</code>: An array of natural numbers of some length, indexed from 1. The actual length is determined by the input data.</li> </ul>"},{"location":"how-to-write-a-specification/#2-post-conditions-textpost","title":"2. Post-Conditions (\\(\\text{Post}:\\))","text":"<p>Post-conditions use logical and mathematical expressions to define what must be true after the operation is complete.</p>"},{"location":"how-to-write-a-specification/#logical-quantifiers","title":"Logical Quantifiers","text":"Example Keywords Description <code>$\\forall i \\in [1..5]: (i&gt;0)$</code> <code>forall</code> For all \\(i\\) in the set \\([1..5]\\), the statement is true. <code>$\\exists i \\in [1..3]: (i=2)$</code> <code>exists</code> There exists an \\(i\\) in the set \\([1..3]\\) such that the statement is true."},{"location":"how-to-write-a-specification/#array-and-matrix-operations","title":"Array and Matrix Operations","text":"<ul> <li>Statement on All Elements: <code>$\\forall i \\in [1..n]: (x[i] &gt; 10)$</code></li> <li>Statement on At Least One Element: <code>$\\exists i \\in [1..n]: (x[i] &lt; 3)$</code></li> <li>Using Length Function: <code>$\\exists i \\in [1..\\text{length}(x3)]: (x3[i] &lt; 3)$</code></li> <li>Nested Quantifier (Matrix Example): <code>$\\forall i \\in [1..8]: (\\exists j \\in [1..8]: (m1[i, j] = 10))$</code></li> </ul>"},{"location":"how-to-write-a-specification/#structuring-data","title":"Structuring Data","text":"<ul> <li>Records (Structs): Fields are referenced using dot notation: <code>r1.name=\"Victor\" \\land r1.grade=5</code>. (The symbol \\(\\land\\) is logical AND).</li> <li>Tuples: Elements are referenced by their number (1-indexed): <code>(3, 5).1=3 \\land (3, 5).2=5</code>.</li> <li>Array Equality: Checks if two arrays are identical: <code>[1, 2, 3]=[1, 2, 3]</code>.</li> </ul>"}]}