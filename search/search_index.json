{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Using the Specificator tool","text":"<ol> <li>Enter the specification.</li> <li>In the right panel, press Ctrl+Space to get a base structure.     Enter the data.</li> <li>If the test case turns green, then:<ul> <li>The data satisfied the specification; or vice versa.</li> <li>The data validated the correctness of the specification.</li> </ul> </li> <li>With the \"Evaluate\" button, the evaluation can also be displayed step-by-step. (Unfortunately, it only works in simpler cases, but it's good for debugging.)</li> </ol>"},{"location":"#example-specification","title":"Example Specification","text":"<pre><code>In:n\u2208N, students\u2208Student[1..n], Student=(name:S x grade:[1..5]), s\u2208Student\nOut: found\u2208L\nPre: -\nPost: found = \u2203 index \u2208 [1..n]:(students[index].name = s.name)\n</code></pre>"},{"location":"how-to-input-data/","title":"How to input data","text":""},{"location":"how-to-input-data/#student-data-specification","title":"Student Data Specification","text":"<p>The main data is represented by the <code>students</code> array, which holds objects for individual students. Each student object uses the keys name and grade.</p>"},{"location":"how-to-input-data/#json-like-format","title":"JSON-like Format","text":"<p>List-based declaration for the student data.</p> <pre><code>students: [\n    {name: \"\u00c1lmos\", grade: 3},\n    {name: \"Gy\u0151z\u0151\", grade: 5},\n    {name: \"G\u00e9za\", grade: 4},\n]\n</code></pre>"},{"location":"how-to-input-data/#yaml-like-format","title":"YAML-like Format","text":"<p>Structure the same data using a more traditional YAML block format.</p> <pre><code>students:\n    - name: Gy\u0151z\u0151\n      grade: 5\n    - name: \u00c1lmos\n      grade: 3\n    - name: G\u00e9za\n      grade: 2\n</code></pre>"},{"location":"how-to-input-data/#single-student-object","title":"Single Student Object","text":"<p>The variable <code>s</code> (for student) represents a single object, defining a name and a grade for one entry.</p>"},{"location":"how-to-input-data/#yaml-format","title":"YAML Format","text":"<p>Definition for the single student object.</p> <pre><code>s:\n  name: Gy\u0151z\u0151\n  grade: 5\n</code></pre>"},{"location":"how-to-input-data/#json-format","title":"JSON Format","text":"<p>Equivalent structure shown in a JSON format.</p> <pre><code>s: {name: \"Gy\u0151z\u0151\", grade:5}\n</code></pre>"},{"location":"how-to-input-data/#boolean-value","title":"Boolean Value","text":"<p>A simple logical (Boolean) variable that is set to true.</p> <pre><code>included: true\n</code></pre>"},{"location":"how-to-write-a-specification/","title":"How to write a specification","text":""},{"location":"how-to-write-a-specification/#input-in","title":"Input <code>In:</code>","text":""},{"location":"how-to-write-a-specification/#elementary-sets","title":"Elementary Sets","text":"<p>Declaration: <code>data_name\u2208Set</code>. <code>data_name</code> starts with a lowercase letter. Declarations are separated by commas.</p> <ul> <li><code>a\u2208N</code> - Set of Natural numbers, \"a\" is ONE value from the natural numbers. <code>a2 element of N</code> can also be used.</li> <li><code>b\u2208Z</code> - Set of Integers.</li> <li><code>c\u2208R</code> - Set of Real numbers.</li> <li><code>d\u2208L</code> - Set of Logical (boolean) values.</li> <li><code>e\u2208S</code> - Set of Strings.</li> <li><code>f\u2208C</code>, <code>f2\u2208K</code> - Set of Characters.</li> </ul>"},{"location":"how-to-write-a-specification/#intervals","title":"Intervals","text":"<ul> <li><code>iv1\u2208[1..3]</code> - <code>iv1</code>'s value can be between 1 and 3 (inclusive).</li> </ul>"},{"location":"how-to-write-a-specification/#indexed-sequences-arrays","title":"Indexed Sequences, Arrays","text":"<p>Used for handling many elements of the same type.</p> <ul> <li><code>x1\u2208N[1..3]</code> - Array of 3 natural numbers, with index range 1..3.<ul> <li>Note: <code>x1</code> is one element from the set of all possible 3-element sequences of natural numbers with a 1..3 index range. (Later, referencing an array element: e.g., <code>x1[2]</code>).</li> </ul> </li> <li><code>x2\u2208N[-1..1]</code> - Array of 3 natural numbers, with index range -1..1.</li> <li><code>n\u2208N, x\u2208Z[1..n]</code> - Often, the array size is part of the input.</li> <li><code>x3\u2208N[1..]</code> - Array of natural numbers of some length, indexed from 1. Its actual length is determined by the specific input and can be queried later with <code>length(x3)</code>.</li> <li><code>x4\u2208N[0..]</code> - Same as above, but indexed from 0.</li> <li><code>x5\u2208N[]</code> - Abbreviation, equivalent to <code>x5\u2208N[1..]</code>.</li> <li><code>x6\u2208N[]=[5, 1, 2]</code> - Array with initial value (constant array).</li> <li><code>x7\u2208N[2+3..n*2]</code> - The index range bounds can be simple expressions.</li> </ul>"},{"location":"how-to-write-a-specification/#matrices","title":"Matrices","text":"<ul> <li><code>m1\u2208Z[1..8,1..8]</code> - 8x8 matrix. (Reference: e.g., <code>m1[3,6]</code>).</li> <li><code>m2\u2208Z[1..n,1..n]</code> - nxn matrix.</li> <li><code>m3\u2208Z[0..,0..]</code> - Matrix of some size, indexed from 0. The size is determined from the data.</li> <li><code>m4\u2208Z[,]</code> - Equivalent to <code>m4\u2208Z[1..,1..]</code>.</li> <li><code>m5\u2208Z[-1..1,-1..1] = [ [2, 1, 2], [1, 0, 1], [2, 1, 1] ]</code> - Matrix with initial value.</li> </ul>"},{"location":"how-to-write-a-specification/#records-structs-objects","title":"Records (Structs, Objects)","text":"<p>Used for enclosing different types of values into a single unit.</p> <ul> <li><code>r1\u2208name:S x grade:N</code> - A unit of a string (<code>name</code>) and a natural number (<code>grade</code>).<ul> <li>Note: <code>r1</code> takes one value from the Cartesian product set <code>S x N</code>. (Later, parts of the record can be referenced by field name: e.g., <code>r1.name</code>).</li> </ul> </li> <li><code>r2\u2208(name:S x grade:N)</code> - Sets after <code>\u2208</code> can be parenthesized.</li> <li><code>r3\u2208(north:L x east:L x south:L x west:L)</code> - A more complex example.</li> <li><code>r4\u2208(m1:[1..2] x m2:[3..4])</code> - <code>r4</code> will be one pair from the set <code>{(1,3), (1,4), (2,3), (2,4)}</code>.</li> </ul>"},{"location":"how-to-write-a-specification/#custom-set-names-types","title":"Custom Set Names (Types)","text":"<p>You can give any existing set another name.</p> <p>Format: <code>Set1=Set2</code>. Custom set names start with a capital letter.</p> <ul> <li><code>g\u2208Grade, Grade=[1..5]</code> - <code>Grade</code> is a custom name for the interval <code>[1..5]</code>.</li> <li><code>g2\u2208Mark, Mark=OneToFive, OneToFive=[1..5]</code> - Long chains of renaming are possible.</li> <li><code>s2\u2208Student[1..], Student=(name:S x grade:N)</code> - Used for clearer descriptions. This is more readable than <code>s1\u2208(name:S x grade:N)[1..]</code>.</li> <li><code>s3\u2208StudentArray, StudentArray=Student2[], Student2=(name:S x grades:Grade[])</code> - Example where a student can have multiple grades (<code>Grade</code> defined above).</li> <li><code>jaggedArray\u2208Row[], Row=N[]</code> - An array of variable-length arrays (jagged array).</li> </ul>"},{"location":"how-to-write-a-specification/#auxiliary-data-aux","title":"Auxiliary Data <code>Aux:</code>","text":"<p>Sometimes, intermediate auxiliary data is used to specify the output. These are defined here.</p> <ul> <li><code>aux\u2208N</code> - Same comma-separated declaration format as for the input.</li> </ul>"},{"location":"how-to-write-a-specification/#output-out","title":"Output <code>Out:</code>","text":"<ul> <li><code>out\u2208L</code> - Same comma-separated declaration format as for the input.</li> <li><code>y\u2208N[]</code></li> </ul>"},{"location":"how-to-write-a-specification/#function-definitions-fn","title":"Function Definitions <code>Fn:</code>","text":"<p>Custom functions can be defined by specifying the domain, codomain, and mapping rule.</p> <ul> <li><code>Fn:</code> <code>f:N-&gt;N, f(p)=p*2</code><ul> <li>A function <code>f</code> that maps a Natural number to a Natural number. <code>f(p)</code> returns <code>p*2</code> (doubler function).</li> </ul> </li> <li><code>Fn:</code> <code>square:Z-&gt;N, square(n)=n*n</code><ul> <li>A function with a descriptive name (<code>square</code>).</li> </ul> </li> <li><code>Fn:</code> <code>add:Z x Z-&gt;Z, add(a,b)=a+b</code><ul> <li>A function with multiple input parameters. (Note: spaces are needed before and after <code>x</code>).</li> </ul> </li> <li><code>Fn:</code> <code>swap:Z x Z-&gt;Z x Z, swap(a, b)=(b, a)</code><ul> <li>A function that returns a tuple (<code>swap</code>).</li> </ul> </li> <li><code>Fn:</code> <code>f2:Z -&gt; Z, f2(p)=p+n</code><ul> <li>Functions have access to declared variables (like <code>n</code>), unless a parameter shadows the name.</li> </ul> </li> <li><code>Fn:</code> <code>getGrade:Student-&gt;N, getGrade(s)=s.grade</code><ul> <li>A function that takes a Record as a parameter.</li> </ul> </li> <li><code>Fn:</code> <code>index:N[] x N-&gt;N, index(x,i)=x[i]</code><ul> <li>A function that takes an Array as a parameter.</li> </ul> </li> </ul>"},{"location":"how-to-write-a-specification/#preconditions-pre","title":"Preconditions <code>Pre:</code>","text":"<p>The precondition is a logical expression concerning the input data. The program is only meaningful to execute if this expression is true. It uses standard logical (<code>and</code>, <code>or</code>, <code>not</code>), comparison (<code>=</code>, <code>&lt;</code>, <code>&gt;</code>), and first-order logic (<code>\u2200</code> - forall, <code>\u2203</code> - exists) operators.</p> <ul> <li><code>true</code> - The simplest precondition (can also be written as <code>Pre: -</code>).</li> <li><code>not false</code></li> <li><code>n&gt;0</code> - We can reference data declared in the input.</li> <li><code>(3&lt;4 or ((3)&gt;4))</code> - Arbitrary nesting of parentheses.</li> <li><code>(true -&gt; true)</code> - Implication, which is only false if <code>true</code> implies <code>false</code>.</li> <li><code>not(true -&gt; false)</code> - This is <code>not(false)</code>, which is <code>true</code>.</li> <li><code>\u2200i\u2208[1..3]:(i&gt;0)</code> - For all <code>i</code> in the set <code>[1..3]</code>, the statement <code>(i&gt;0)</code> is true. (The keyword <code>forall</code> can also be used).</li> <li><code>\u2200i\u2208[1..n]:(x[i]&gt;10)</code> - A statement about all elements in an array.</li> <li><code>\u2203i\u2208[1..3]:(i=2)</code> - There exists an <code>i</code> in the set <code>[1..3]</code> such that the statement <code>(i=2)</code> is true. (The keyword <code>exists</code> can also be used).</li> <li><code>\u2203i\u2208[1..n]:(x[i]&lt;3)</code> - States that at least one element in array <code>x</code> is less than 3.</li> <li><code>\u2203i\u2208[1..length(x3)]:(x3[i]&lt;3)</code> - Using the <code>length()</code> function if the array's end index wasn't declared.</li> <li><code>\u2203i\u2208[from(x3)..to(x3)]:(x3[i]&lt;3)</code> - Index range can also be queried with <code>from()</code> and <code>to()</code>.</li> <li><code>\u2200i\u2208[1..8]:(\u2203j\u2208[1..8]:(m1[i,j]=10))</code> - A nested example for a matrix: \"For every row <code>i</code>, there exists a column <code>j</code> such that the element <code>m1[i,j]</code> is 10.\"</li> <li><code>r1.name=\"Victor\" and r1.grade=5</code> - Referencing fields in a record.</li> <li><code>(3, 5).1=3 and (3, 5).2=5</code> - Tuples can be used and elements are referenced by number.</li> <li><code>[1, 2, 3]=[1, 2, 3]</code> - Array literals (rare).</li> <li><code>[0..:1, 2, 3]=[0..:1, 2, 3]</code> - Array literal with an index range.</li> <li><code>[[1, 2], [3, 4]]=[1..,1..:[1, 2], [3, 4]]</code> - Matrix literal with an index range.</li> </ul>"},{"location":"how-to-write-a-specification/#postconditions-post","title":"Postconditions <code>Post:</code>","text":"<p>The postcondition is the most important part of the specification. It is a logical statement that describes the relationship between the input and output data. It is true if, for a valid input (one that satisfies the <code>Pre:</code>), the program produces the correct output.</p> <ul> <li><code>true</code> - (The description is omitted here as it wouldn't be meaningful without a specific problem).</li> </ul>"}]}